(function() {var implementors = {};
implementors["num_traits"] = [];
implementors["spirv_headers"] = [{"text":"impl FromPrimitive for SourceLanguage","synthetic":false,"types":[]},{"text":"impl FromPrimitive for ExecutionModel","synthetic":false,"types":[]},{"text":"impl FromPrimitive for AddressingModel","synthetic":false,"types":[]},{"text":"impl FromPrimitive for MemoryModel","synthetic":false,"types":[]},{"text":"impl FromPrimitive for ExecutionMode","synthetic":false,"types":[]},{"text":"impl FromPrimitive for StorageClass","synthetic":false,"types":[]},{"text":"impl FromPrimitive for Dim","synthetic":false,"types":[]},{"text":"impl FromPrimitive for SamplerAddressingMode","synthetic":false,"types":[]},{"text":"impl FromPrimitive for SamplerFilterMode","synthetic":false,"types":[]},{"text":"impl FromPrimitive for ImageFormat","synthetic":false,"types":[]},{"text":"impl FromPrimitive for ImageChannelOrder","synthetic":false,"types":[]},{"text":"impl FromPrimitive for ImageChannelDataType","synthetic":false,"types":[]},{"text":"impl FromPrimitive for FPRoundingMode","synthetic":false,"types":[]},{"text":"impl FromPrimitive for LinkageType","synthetic":false,"types":[]},{"text":"impl FromPrimitive for AccessQualifier","synthetic":false,"types":[]},{"text":"impl FromPrimitive for FunctionParameterAttribute","synthetic":false,"types":[]},{"text":"impl FromPrimitive for Decoration","synthetic":false,"types":[]},{"text":"impl FromPrimitive for BuiltIn","synthetic":false,"types":[]},{"text":"impl FromPrimitive for Scope","synthetic":false,"types":[]},{"text":"impl FromPrimitive for GroupOperation","synthetic":false,"types":[]},{"text":"impl FromPrimitive for KernelEnqueueFlags","synthetic":false,"types":[]},{"text":"impl FromPrimitive for Capability","synthetic":false,"types":[]},{"text":"impl FromPrimitive for RayQueryIntersection","synthetic":false,"types":[]},{"text":"impl FromPrimitive for RayQueryCommittedIntersectionType","synthetic":false,"types":[]},{"text":"impl FromPrimitive for RayQueryCandidateIntersectionType","synthetic":false,"types":[]},{"text":"impl FromPrimitive for Op","synthetic":false,"types":[]},{"text":"impl FromPrimitive for GLOp","synthetic":false,"types":[]},{"text":"impl FromPrimitive for CLOp","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()