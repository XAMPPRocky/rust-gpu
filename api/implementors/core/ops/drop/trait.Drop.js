(function() {var implementors = {};
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Drop for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for IntoIter&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array&gt; Drop for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: 'a,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["calloop"] = [{"text":"impl Drop for Signals","synthetic":false,"types":[]}];
implementors["copyless"] = [{"text":"impl&lt;T&gt; Drop for BoxAllocation&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Drop for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Drop for SelectedOperation&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Drop for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Drop for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for LocalHandle","synthetic":false,"types":[]},{"text":"impl Drop for Guard","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Drop for ShardedLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for WaitGroup","synthetic":false,"types":[]}];
implementors["example_runner"] = [{"text":"impl Drop for ExampleBase","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Drop for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for UnboundedReceiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_executor"] = [{"text":"impl Drop for Enter","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl&lt;T, '_&gt; Drop for LocalFutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Drop for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut&gt; Drop for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Drop for MutexLockFuture&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Drop for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, U:&nbsp;?Sized, '_&gt; Drop for MappedMutexGuard&lt;'_, T, U&gt;","synthetic":false,"types":[]}];
implementors["gfx_backend_vulkan"] = [{"text":"impl Drop for RawInstance","synthetic":false,"types":[]}];
implementors["gfx_descriptor"] = [{"text":"impl&lt;B:&nbsp;Backend&gt; Drop for DescriptorAllocator&lt;B&gt;","synthetic":false,"types":[]}];
implementors["gfx_memory"] = [{"text":"impl Drop for DedicatedAllocator","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Backend&gt; Drop for GeneralAllocator&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Backend&gt; Drop for LinearAllocator&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Backend&gt; Drop for Heaps&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T, B:&nbsp;Backend&gt; Drop for Writer&lt;'a, 'b, T, B&gt;","synthetic":false,"types":[]}];
implementors["inplace_it"] = [{"text":"impl&lt;'a, T&gt; Drop for SliceMemoryGuard&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["libloading"] = [{"text":"impl Drop for Library","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;?Sized + 'a&gt; Drop for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + 'a&gt; Drop for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Drop for Registration","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Drop for Dir","synthetic":false,"types":[]},{"text":"impl&lt;'d&gt; Drop for Iter&lt;'d&gt;","synthetic":false,"types":[]},{"text":"impl Drop for InterfaceAddressIterator","synthetic":false,"types":[]},{"text":"impl Drop for PtyMaster","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for AioCb&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Drop for SignalFd","synthetic":false,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;'a, T:&nbsp;Ord + Send&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for Drain&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Send&gt; Drop for Drain&lt;'data, T&gt;","synthetic":false,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Drop for ThreadPool","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Drop for Ast","synthetic":false,"types":[]},{"text":"impl Drop for ClassSet","synthetic":false,"types":[]},{"text":"impl Drop for Hir","synthetic":false,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Drop for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sharded_slab"] = [{"text":"impl&lt;'a, T, C&gt; Drop for PoolGuard&lt;'a, T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clear + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Config,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, C:&nbsp;Config&gt; Drop for Guard&lt;'a, T, C&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T:&nbsp;'a + Array&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for SmallVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for IntoIter&lt;A&gt;","synthetic":false,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl Drop for DataDevice","synthetic":false,"types":[]},{"text":"impl Drop for DataOffer","synthetic":false,"types":[]},{"text":"impl Drop for MemPool","synthetic":false,"types":[]},{"text":"impl Drop for BasicFrame","synthetic":false,"types":[]},{"text":"impl Drop for ConceptFrame","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Frame&gt; Drop for Window&lt;F&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;'a&gt; Drop for ParseBuffer&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["tar"] = [{"text":"impl&lt;W:&nbsp;Write&gt; Drop for Builder&lt;W&gt;","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl Drop for TempDir","synthetic":false,"types":[]},{"text":"impl Drop for TempPath","synthetic":false,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Drop for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tracing"] = [{"text":"impl Drop for Span","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for Entered&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Drop for DefaultGuard","synthetic":false,"types":[]}];
implementors["wayland_client"] = [{"text":"impl Drop for ReadEventsGuard","synthetic":false,"types":[]},{"text":"impl Drop for CursorTheme","synthetic":false,"types":[]},{"text":"impl Drop for WlEglSurface","synthetic":false,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl Drop for Socket","synthetic":false,"types":[]},{"text":"impl Drop for UserData","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Drop for ThreadGuard&lt;T&gt;","synthetic":false,"types":[]}];
implementors["wgpu"] = [{"text":"impl Drop for Sampler","synthetic":false,"types":[]},{"text":"impl Drop for BindGroupLayout","synthetic":false,"types":[]},{"text":"impl Drop for BindGroup","synthetic":false,"types":[]},{"text":"impl Drop for ShaderModule","synthetic":false,"types":[]},{"text":"impl Drop for PipelineLayout","synthetic":false,"types":[]},{"text":"impl Drop for RenderPipeline","synthetic":false,"types":[]},{"text":"impl Drop for ComputePipeline","synthetic":false,"types":[]},{"text":"impl Drop for CommandBuffer","synthetic":false,"types":[]},{"text":"impl Drop for RenderBundle","synthetic":false,"types":[]},{"text":"impl Drop for Device","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Drop for BufferView&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Drop for BufferViewMut&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl Drop for Buffer","synthetic":false,"types":[]},{"text":"impl Drop for Texture","synthetic":false,"types":[]},{"text":"impl Drop for TextureView","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for RenderPass&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for ComputePass&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Drop for SwapChainTexture","synthetic":false,"types":[]}];
implementors["wgpu_core"] = [{"text":"impl&lt;'a, T&gt; Drop for Token&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;GlobalIdentityHandlerFactory&gt; Drop for Global&lt;G&gt;","synthetic":false,"types":[]}];
implementors["wgpu_subscriber"] = [{"text":"impl Drop for ChromeTracingLayer","synthetic":false,"types":[]}];
implementors["winit"] = [{"text":"impl Drop for Window","synthetic":false,"types":[]}];
implementors["xkb"] = [{"text":"impl Drop for Context","synthetic":false,"types":[]},{"text":"impl Drop for Keymap","synthetic":false,"types":[]},{"text":"impl Drop for State","synthetic":false,"types":[]},{"text":"impl Drop for Table","synthetic":false,"types":[]},{"text":"impl Drop for State","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()